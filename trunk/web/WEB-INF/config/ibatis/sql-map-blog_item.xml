<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="BlogItem">

	<typeAlias alias="blogItem1" type="com.imanager.blog.domain.BlogItem1" />
	<typeAlias alias="blogItem2" type="com.imanager.blog.domain.BlogItem2" />

	<resultMap id="get-blogItem2-result" class="blogItem2">
		<result property="blogItem2Id" column="blog_item2.blog_item2_id"/>
		<result property="creator" column="blog_item2.creator"/>
		<result property="gmtCreated" column="blog_item2.gmt_created"/>
		<result property="modifier" column="blog_item2.modifier"/>
		<result property="gmtModified" column="blog_item2.gmt_modified"/>
		<result property="isDeleted" column="blog_item2.is_deleted"/>
		<result property="itemChn" column="blog_item2.item_chn"/>
		<result property="itemEng" column="blog_item2.item_eng"/>
		<result property="item1Chn" column="blog_item1.item_chn"/>
		<result property="item1Eng" column="blog_item1.item_eng"/>
		<result property="blogItem1Id" column="blog_item2.blog_item1_id"/>
		<result property="loginId" column="blog_item2.login_id"/>
	</resultMap>
	
	
	<insert id="insertBlogItem1"
		parameterClass="blogItem1">
		<![CDATA[
			INSERT INTO blog_item1 
				(creator, gmt_created, modifier, gmt_modified, is_deleted, item_chn, item_eng, login_id) 
			VALUES 
				(#creator#, now(), #modifier#, now(), 'no', #itemChn#, #itemEng#, #loginId#)
		]]>
	</insert>

	<select id="getBlogItem1ListByLoginId"
		parameterClass="java.lang.String"
		resultClass="blogItem1">
		<![CDATA[
			select 	a.blog_item1_id		as blogItem1Id,
					a.creator			as creator,
					a.gmt_created		as gmtCreated,
					a.modifier			as modifier,
					a.gmt_modified		as gmtModified,
					a.is_deleted		as isDeleted,
					a.item_chn			as itemChn,
					a.item_eng			as itemEng,
					a.login_id			as loginId,
					b.item2_count		as item2Count
			from blog_item1 a left join 
				(select	count(blog_item1_id) as item2_count, blog_item1_id
				 from	blog_item2
				 where	is_deleted = 'no' and
						login_id = #loginId#
						group by blog_item1_id) b on a.blog_item1_id = b.blog_item1_id
			where a.is_deleted = 'no' and a.login_id = #loginId# 
				order by a.gmt_created asc
		]]>
	</select>

	<select id="getBlogItem1ByItemId"
		parameterClass="java.lang.String"
		resultClass="blogItem1">
		<![CDATA[
			select 	blog_item1_id	as blogItem1Id,
					creator			as creator,
					gmt_created		as gmtCreated,
					modifier		as modifier,
					gmt_modified	as gmtModified,
					is_deleted		as isDeleted,
					item_chn		as itemChn,
					item_eng		as itemEng,
					login_id		as loginId
			from blog_item1
			where is_deleted = 'no' and blog_item1_id = #blogItem1Id#
		]]>
	</select>
	
	<update id="updateBlogItem1" 
		parameterClass="blogItem1">
		<![CDATA[
			update blog_item1 
			set modifier 		= #modifier#, 
				gmt_modified 	= now(),
				item_chn 		= #itemChn#,
				item_eng		= #itemEng#
			where	blog_item1_id = #blogItem1Id# and is_deleted = 'no'
		]]>
	</update>
	
	<update id="logicDeleteBlogItem1" 
		parameterClass="java.util.Map">
		<![CDATA[
			update blog_item1
			set modifier 		= #modifier#, 
				gmt_modified 	= now(),
				is_deleted 		= 'yes'
			where	blog_item1_id = #blogItem1Id#
		]]>
	</update>
	
	<insert id="insertBlogItem2"
		parameterClass="blogItem2">
		<![CDATA[
			INSERT INTO blog_item2 
				(creator, gmt_created, modifier, gmt_modified, is_deleted, item_chn, item_eng, blog_item1_id, login_id) 
			VALUES 
				(#creator#, now(), #modifier#, now(), 'no', #itemChn#, #itemEng#, #blogItem1Id#, #loginId#)
		]]>
	</insert>
	
	<select id="getBlogItem2ListByLoginId"
		parameterClass="java.lang.String"
		resultMap="get-blogItem2-result">
		<![CDATA[
			select	*
			from	blog_item2 left join blog_item1 on 
					blog_item2.blog_item1_id = blog_item1.blog_item1_id
			where	blog_item2.is_deleted = 'no' and
					blog_item2.login_id = #loginId#
					order by blog_item2.blog_item1_id asc, blog_item2.gmt_created asc
		]]>
	</select>
	
	<select id="getBlogItem2ByItemId"
		parameterClass="java.lang.String"
		resultClass="blogItem2">
		<![CDATA[
			select	blog_item2_id	as blogItem2Id,
					creator			as creator,
					gmt_created		as gmtCreated,
					modifier		as modifier,
					gmt_modified	as gmtModified,
					is_deleted		as isDeleted,
					item_chn		as itemChn,
					item_eng		as itemEng,
					blog_item1_id	as blogItem1Id,
					login_id		as loginId
			from	blog_item2
			where	blog_item2.is_deleted = 'no' and
					blog_item2_id = #blogItem2Id#
		]]>
	</select>
	
	<update id="updateBlogItem2" 
		parameterClass="blogItem2">
		<![CDATA[
			update blog_item2
			set modifier 		= #modifier#, 
				gmt_modified 	= now(),
				item_chn 		= #itemChn#,
				item_eng		= #itemEng#,
				blog_item1_id	= #blogItem1Id#
			where	blog_item2_id = #blogItem2Id# and is_deleted = 'no'
		]]>
	</update>
	
	<update id="logicDeleteBlogItem2" 
		parameterClass="java.util.Map">
		<![CDATA[
			update blog_item2
			set modifier 		= #modifier#, 
				gmt_modified 	= now(),
				is_deleted 		= 'yes'
			where	blog_item2_id = #blogItem2Id#
		]]>
	</update>
	
	<select id="isItem1HasItem2"
		parameterClass="java.util.Map"
		resultClass="int">
		<![CDATA[
			select 	count(*)
			from blog_item2
			where login_id = #loginId# and is_deleted='no' and blog_item1_id = #blogItem1Id#
		]]>
	</select>
	
	<select id="getBlogItem2ByItem1IdNLoginId"
		parameterClass="java.util.Map"
		resultMap="get-blogItem2-result">
		<![CDATA[
			select	*
			from	blog_item1, blog_item2
			where	blog_item1.login_id = blog_item2.login_id and blog_item2.login_id = #loginId# 
					and blog_item1.is_deleted = blog_item2.is_deleted and blog_item2.is_deleted='no' 
					and blog_item1.blog_item1_id = blog_item2.blog_item1_id and blog_item2.blog_item1_id = #blogItem1Id#
			order by blog_item2.gmt_created asc
		]]>
	</select>
	
</sqlMap>

<!-- 
	where login_id = #loginId# and fee_date >= #startDate# AND fee_date < #endDate#
	where login_id = #loginId# and fee_date between #startDate# and #endDate#
	where login_id = #loginId# and fee_date between #startDate# and #endDate# order by fee_date asc
 -->
<!--
	<dynamic>
		<isNotNull property="startDate">
			<isNotNull prepend="AND" property="endDate">
				<![CDATA[(fee_date >= #startDate# AND fee_date < #endDate#)]]>
			</isNotNull>
		</isNotNull>
	</dynamic>
-->